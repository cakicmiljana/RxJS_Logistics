(()=>{"use strict";var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};function e(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}function n(t,e){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(u){return function(c){return function(u){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,u[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&u[0]?r.return:u[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,u[1])).done)return o;switch(r=0,o&&(u=[2&u[0],o.value]),u[0]){case 0:case 1:o=u;break;case 4:return a.label++,{value:u[1],done:!1};case 5:a.label++,r=u[1],u=[0];continue;case 7:u=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==u[0]&&2!==u[0])){a=0;continue}if(3===u[0]&&(!o||u[1]>o[0]&&u[1]<o[3])){a.label=u[1];break}if(6===u[0]&&a.label<o[1]){a.label=o[1],o=u;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(u);break}o[2]&&a.ops.pop(),a.trys.pop();continue}u=e.call(t,a)}catch(t){u=[6,t],r=0}finally{n=o=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,c])}}}function r(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function o(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,i=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}function i(t,e,n){if(n||2===arguments.length)for(var r,o=0,i=e.length;o<i;o++)!r&&o in e||(r||(r=Array.prototype.slice.call(e,0,o)),r[o]=e[o]);return t.concat(r||Array.prototype.slice.call(e))}function a(t){return this instanceof a?(this.v=t,this):new a(t)}function u(t){return"function"==typeof t}function c(t){var e=t((function(t){Error.call(t),t.stack=(new Error).stack}));return e.prototype=Object.create(Error.prototype),e.prototype.constructor=e,e}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var s=c((function(t){return function(e){t(this),this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e}}));function l(t,e){if(t){var n=t.indexOf(e);0<=n&&t.splice(n,1)}}var d=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._finalizers=null}return t.prototype.unsubscribe=function(){var t,e,n,a,c;if(!this.closed){this.closed=!0;var l=this._parentage;if(l)if(this._parentage=null,Array.isArray(l))try{for(var d=r(l),f=d.next();!f.done;f=d.next())f.value.remove(this)}catch(e){t={error:e}}finally{try{f&&!f.done&&(e=d.return)&&e.call(d)}finally{if(t)throw t.error}}else l.remove(this);var p=this.initialTeardown;if(u(p))try{p()}catch(t){c=t instanceof s?t.errors:[t]}var v=this._finalizers;if(v){this._finalizers=null;try{for(var b=r(v),y=b.next();!y.done;y=b.next()){var m=y.value;try{h(m)}catch(t){c=null!=c?c:[],t instanceof s?c=i(i([],o(c)),o(t.errors)):c.push(t)}}}catch(t){n={error:t}}finally{try{y&&!y.done&&(a=b.return)&&a.call(b)}finally{if(n)throw n.error}}}if(c)throw new s(c)}},t.prototype.add=function(e){var n;if(e&&e!==this)if(this.closed)h(e);else{if(e instanceof t){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(e)}},t.prototype._hasParent=function(t){var e=this._parentage;return e===t||Array.isArray(e)&&e.includes(t)},t.prototype._addParent=function(t){var e=this._parentage;this._parentage=Array.isArray(e)?(e.push(t),e):e?[e,t]:t},t.prototype._removeParent=function(t){var e=this._parentage;e===t?this._parentage=null:Array.isArray(e)&&l(e,t)},t.prototype.remove=function(e){var n=this._finalizers;n&&l(n,e),e instanceof t&&e._removeParent(this)},t.EMPTY=((e=new t).closed=!0,e),t;var e}(),f=d.EMPTY;function p(t){return t instanceof d||t&&"closed"in t&&u(t.remove)&&u(t.add)&&u(t.unsubscribe)}function h(t){u(t)?t():t.unsubscribe()}var v={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},b={setTimeout:function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var a=b.delegate;return(null==a?void 0:a.setTimeout)?a.setTimeout.apply(a,i([t,e],o(n))):setTimeout.apply(void 0,i([t,e],o(n)))},clearTimeout:function(t){var e=b.delegate;return((null==e?void 0:e.clearTimeout)||clearTimeout)(t)},delegate:void 0};function y(t){b.setTimeout((function(){var e=v.onUnhandledError;if(!e)throw t;e(t)}))}function m(){}var w=g("C",void 0,void 0);function g(t,e,n){return{kind:t,value:e,error:n}}var E=null;function S(t){if(v.useDeprecatedSynchronousErrorHandling){var e=!E;if(e&&(E={errorThrown:!1,error:null}),t(),e){var n=E,r=n.errorThrown,o=n.error;if(E=null,r)throw o}}else t()}var C=function(t){function n(e){var n=t.call(this)||this;return n.isStopped=!1,e?(n.destination=e,p(e)&&e.add(n)):n.destination=k,n}return e(n,t),n.create=function(t,e,n){return new T(t,e,n)},n.prototype.next=function(t){this.isStopped?O(function(t){return g("N",t,void 0)}(t),this):this._next(t)},n.prototype.error=function(t){this.isStopped?O(g("E",void 0,t),this):(this.isStopped=!0,this._error(t))},n.prototype.complete=function(){this.isStopped?O(w,this):(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},n.prototype._next=function(t){this.destination.next(t)},n.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},n.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},n}(d),L=Function.prototype.bind;function x(t,e){return L.call(t,e)}var D=function(){function t(t){this.partialObserver=t}return t.prototype.next=function(t){var e=this.partialObserver;if(e.next)try{e.next(t)}catch(t){I(t)}},t.prototype.error=function(t){var e=this.partialObserver;if(e.error)try{e.error(t)}catch(t){I(t)}else I(t)},t.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(t){I(t)}},t}(),T=function(t){function n(e,n,r){var o,i,a=t.call(this)||this;return u(e)||!e?o={next:null!=e?e:void 0,error:null!=n?n:void 0,complete:null!=r?r:void 0}:a&&v.useDeprecatedNextContext?((i=Object.create(e)).unsubscribe=function(){return a.unsubscribe()},o={next:e.next&&x(e.next,i),error:e.error&&x(e.error,i),complete:e.complete&&x(e.complete,i)}):o=e,a.destination=new D(o),a}return e(n,t),n}(C);function I(t){var e;v.useDeprecatedSynchronousErrorHandling?(e=t,v.useDeprecatedSynchronousErrorHandling&&E&&(E.errorThrown=!0,E.error=e)):y(t)}function O(t,e){var n=v.onStoppedNotification;n&&b.setTimeout((function(){return n(t,e)}))}var k={closed:!0,next:m,error:function(t){throw t},complete:m},A="function"==typeof Symbol&&Symbol.observable||"@@observable";function _(t){return t}var P=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r,o=this,i=(r=t)&&r instanceof C||function(t){return t&&u(t.next)&&u(t.error)&&u(t.complete)}(r)&&p(r)?t:new T(t,e,n);return S((function(){var t=o,e=t.operator,n=t.source;i.add(e?e.call(i,n):n?o._subscribe(i):o._trySubscribe(i))})),i},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){t.error(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=R(e))((function(e,r){var o=new T({next:function(e){try{t(e)}catch(t){r(t),o.unsubscribe()}},error:r,complete:e});n.subscribe(o)}))},t.prototype._subscribe=function(t){var e;return null===(e=this.source)||void 0===e?void 0:e.subscribe(t)},t.prototype[A]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return(0===(n=t).length?_:1===n.length?n[0]:function(t){return n.reduce((function(t,e){return e(t)}),t)})(this);var n},t.prototype.toPromise=function(t){var e=this;return new(t=R(t))((function(t,n){var r;e.subscribe((function(t){return r=t}),(function(t){return n(t)}),(function(){return t(r)}))}))},t.create=function(e){return new t(e)},t}();function R(t){var e;return null!==(e=null!=t?t:v.Promise)&&void 0!==e?e:Promise}var N=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function U(t){return u(null==t?void 0:t.then)}function F(t){return u(t[A])}function j(t){return Symbol.asyncIterator&&u(null==t?void 0:t[Symbol.asyncIterator])}function G(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var M="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function z(t){return u(null==t?void 0:t[M])}function B(t){return function(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(t,e||[]),i=[];return r={},u("next"),u("throw"),u("return"),r[Symbol.asyncIterator]=function(){return this},r;function u(t){o[t]&&(r[t]=function(e){return new Promise((function(n,r){i.push([t,e,n,r])>1||c(t,e)}))})}function c(t,e){try{(n=o[t](e)).value instanceof a?Promise.resolve(n.value.v).then(s,l):d(i[0][2],n)}catch(t){d(i[0][3],t)}var n}function s(t){c("next",t)}function l(t){c("throw",t)}function d(t,e){t(e),i.shift(),i.length&&c(i[0][0],i[0][1])}}(this,arguments,(function(){var e,r,o;return n(this,(function(n){switch(n.label){case 0:e=t.getReader(),n.label=1;case 1:n.trys.push([1,,9,10]),n.label=2;case 2:return[4,a(e.read())];case 3:return r=n.sent(),o=r.value,r.done?[4,a(void 0)]:[3,5];case 4:return[2,n.sent()];case 5:return[4,a(o)];case 6:return[4,n.sent()];case 7:return n.sent(),[3,2];case 8:return[3,10];case 9:return e.releaseLock(),[7];case 10:return[2]}}))}))}function V(t){return u(null==t?void 0:t.getReader)}function K(t){if(t instanceof P)return t;if(null!=t){if(F(t))return i=t,new P((function(t){var e=i[A]();if(u(e.subscribe))return e.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(N(t))return o=t,new P((function(t){for(var e=0;e<o.length&&!t.closed;e++)t.next(o[e]);t.complete()}));if(U(t))return n=t,new P((function(t){n.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,y)}));if(j(t))return H(t);if(z(t))return e=t,new P((function(t){var n,o;try{for(var i=r(e),a=i.next();!a.done;a=i.next()){var u=a.value;if(t.next(u),t.closed)return}}catch(t){n={error:t}}finally{try{a&&!a.done&&(o=i.return)&&o.call(i)}finally{if(n)throw n.error}}t.complete()}));if(V(t))return H(B(t))}var e,n,o,i;throw G(t)}function H(t){return new P((function(e){(function(t,e){var o,i,a,u,c,s,l,d;return c=this,s=void 0,d=function(){var c,s;return n(this,(function(n){switch(n.label){case 0:n.trys.push([0,5,6,11]),o=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=r(t),e={},o("next"),o("throw"),o("return"),e[Symbol.asyncIterator]=function(){return this},e);function o(n){e[n]=t[n]&&function(e){return new Promise((function(r,o){!function(t,e,n,r){Promise.resolve(r).then((function(e){t({value:e,done:n})}),e)}(r,o,(e=t[n](e)).done,e.value)}))}}}(t),n.label=1;case 1:return[4,o.next()];case 2:if((i=n.sent()).done)return[3,4];if(c=i.value,e.next(c),e.closed)return[2];n.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return s=n.sent(),a={error:s},[3,11];case 6:return n.trys.push([6,,9,10]),i&&!i.done&&(u=o.return)?[4,u.call(o)]:[3,8];case 7:n.sent(),n.label=8;case 8:return[3,10];case 9:if(a)throw a.error;return[7];case 10:return[7];case 11:return e.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(t,e){function n(t){try{o(d.next(t))}catch(t){e(t)}}function r(t){try{o(d.throw(t))}catch(t){e(t)}}function o(e){var o;e.done?t(e.value):(o=e.value,o instanceof l?o:new l((function(t){t(o)}))).then(n,r)}o((d=d.apply(c,s||[])).next())}))})(t,e).catch((function(t){return e.error(t)}))}))}var J=Array.isArray,Y=new P((function(t){return t.complete()}));function W(t,e,n,r,o){return new q(t,e,n,r,o)}var q=function(t){function n(e,n,r,o,i,a){var u=t.call(this,e)||this;return u.onFinalize=i,u.shouldUnsubscribe=a,u._next=n?function(t){try{n(t)}catch(t){e.error(t)}}:t.prototype._next,u._error=o?function(t){try{o(t)}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._error,u._complete=r?function(){try{r()}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,u}return e(n,t),n.prototype.unsubscribe=function(){var e;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;t.prototype.unsubscribe.call(this),!n&&(null===(e=this.onFinalize)||void 0===e||e.call(this))}},n}(C);function Q(t){return t&&u(t.schedule)}function X(t){return t[t.length-1]}function Z(t){return u(X(t))?t.pop():void 0}function $(t){return Q(X(t))?t.pop():void 0}function tt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=Z(t),r=function(t){return 1===t.length&&J(t[0])?t[0]:t}(t);return r.length?new P((function(t){var e=r.map((function(){return[]})),a=r.map((function(){return!1}));t.add((function(){e=a=null}));for(var u=function(u){K(r[u]).subscribe(W(t,(function(r){if(e[u].push(r),e.every((function(t){return t.length}))){var c=e.map((function(t){return t.shift()}));t.next(n?n.apply(void 0,i([],o(c))):c),e.some((function(t,e){return!t.length&&a[e]}))&&t.complete()}}),(function(){a[u]=!0,!e[u].length&&t.complete()})))},c=0;!t.closed&&c<r.length;c++)u(c);return function(){e=a=null}})):Y}function et(t,e,n,r,o){void 0===r&&(r=0),void 0===o&&(o=!1);var i=e.schedule((function(){n(),o?t.add(this.schedule(null,r)):this.unsubscribe()}),r);if(t.add(i),!o)return i}function nt(t){return function(e){if(function(t){return u(null==t?void 0:t.lift)}(e))return e.lift((function(e){try{return t(e,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}function rt(t,e){return void 0===e&&(e=0),nt((function(n,r){n.subscribe(W(r,(function(n){return et(r,t,(function(){return r.next(n)}),e)}),(function(){return et(r,t,(function(){return r.complete()}),e)}),(function(n){return et(r,t,(function(){return r.error(n)}),e)})))}))}function ot(t,e){return void 0===e&&(e=0),nt((function(n,r){r.add(t.schedule((function(){return n.subscribe(r)}),e))}))}function it(t,e){if(!t)throw new Error("Iterable cannot be null");return new P((function(n){et(n,e,(function(){var r=t[Symbol.asyncIterator]();et(n,e,(function(){r.next().then((function(t){t.done?n.complete():n.next(t.value)}))}),0,!0)}))}))}function at(t,e){return e?function(t,e){if(null!=t){if(F(t))return function(t,e){return K(t).pipe(ot(e),rt(e))}(t,e);if(N(t))return function(t,e){return new P((function(n){var r=0;return e.schedule((function(){r===t.length?n.complete():(n.next(t[r++]),n.closed||this.schedule())}))}))}(t,e);if(U(t))return function(t,e){return K(t).pipe(ot(e),rt(e))}(t,e);if(j(t))return it(t,e);if(z(t))return function(t,e){return new P((function(n){var r;return et(n,e,(function(){r=t[M](),et(n,e,(function(){var t,e,o;try{e=(t=r.next()).value,o=t.done}catch(t){return void n.error(t)}o?n.complete():n.next(e)}),0,!0)})),function(){return u(null==r?void 0:r.return)&&r.return()}}))}(t,e);if(V(t))return function(t,e){return it(B(t),e)}(t,e)}throw G(t)}(t,e):K(t)}const ut="http://localhost:3000/vehicles/",ct="http://localhost:3000/drivers/",st="http://localhost:3000/orders/",lt={lat:42.9977,lng:21.9654};var dt;function ft(t){return at(fetch(ut+t).then((function(t){if(t.ok)return t.json();throw new Error("Vehicle not found.")})).catch((function(t){return console.error(t)})))}function pt(t){fetch("".concat(ut,"/").concat(t.id),{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}).then((function(e){t.updateTruckData(t)}))}function ht(t){fetch("".concat(st,"/").concat(t.id),{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}).then((function(e){t.updateOrderData(t)}))}function vt(t){fetch("".concat(ct,"/").concat(t.id),{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}).then((function(e){t.updateDriverData(t)}))}function bt(t,e,n){for(t.target;n.firstChild;)n.classList.contains(e)||n.removeChild(n.lastChild)}!function(t){t.pending="pending",t.shipped="shipped",t.delivered="delivered"}(dt||(dt={}));var yt,mt=function(){function t(t,e,n,r,o,i){"number"==typeof t?(this.id=t,this.Status=e,this.TotalLoad=n,this.Destination=r,this.AssignedDriverID=o,this.AssignedTruckID=i):(this.id=t.id,this.Status=t.Status,this.TotalLoad=t.TotalLoad,this.Destination=new google.maps.LatLng(t.Destination),this.AssignedDriverID=t.AssignedDriverID,this.AssignedTruckID=t.AssignedTruckID)}return t.prototype.placeNewOrder=function(e,n,r,o,i,a){new t(e,n,r,o,i,a),ht(this)},t.prototype.updateOrderData=function(t){t.hasOwnProperty("Status")&&(this.Status=t.Status),t.hasOwnProperty("TotalLoad")&&(this.TotalLoad=t.TotalLoad),t.hasOwnProperty("Destination")&&(this.Destination=t.Destination),t.hasOwnProperty("AssignedDriverID")&&(this.AssignedDriverID=t.AssignedDriverID),t.hasOwnProperty("AssignedTruckID")&&(this.AssignedTruckID=t.AssignedTruckID)},t.prototype.destinationReachedUpdate=function(){this.Status="delivered"},t}();function wt(t){var e=new google.maps.Map(document.getElementById("map"),{center:lt,zoom:7});yt=new google.maps.Marker({position:t.CurrentLocation,map:e}),new google.maps.Marker({position:t.FinalDestination,map:e}),setInterval((function(){yt.setPosition(t.CurrentLocation),console.log("CURR ",t.CurrentLocation.lat())}),1e3)}var gt=Array.isArray,Et=Object.getPrototypeOf,St=Object.prototype,Ct=Object.keys;function Lt(t,e){return nt((function(n,r){var o=0;n.subscribe(W(r,(function(n){r.next(t.call(e,n,o++))})))}))}var xt=Array.isArray;function Dt(t,e,n){var r=u(t)||e||n?{next:t,error:e,complete:n}:t;return r?nt((function(t,e){var n;null===(n=r.subscribe)||void 0===n||n.call(r);var o=!0;t.subscribe(W(e,(function(t){var n;null===(n=r.next)||void 0===n||n.call(r,t),e.next(t)}),(function(){var t;o=!1,null===(t=r.complete)||void 0===t||t.call(r),e.complete()}),(function(t){var n;o=!1,null===(n=r.error)||void 0===n||n.call(r,t),e.error(t)}),(function(){var t,e;o&&(null===(t=r.unsubscribe)||void 0===t||t.call(r)),null===(e=r.finalize)||void 0===e||e.call(r)})))})):_}var Tt=c((function(t){return function(){t(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),It=function(t){function n(){var e=t.call(this)||this;return e.closed=!1,e.currentObservers=null,e.observers=[],e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return e(n,t),n.prototype.lift=function(t){var e=new Ot(this,this);return e.operator=t,e},n.prototype._throwIfClosed=function(){if(this.closed)throw new Tt},n.prototype.next=function(t){var e=this;S((function(){var n,o;if(e._throwIfClosed(),!e.isStopped){e.currentObservers||(e.currentObservers=Array.from(e.observers));try{for(var i=r(e.currentObservers),a=i.next();!a.done;a=i.next())a.value.next(t)}catch(t){n={error:t}}finally{try{a&&!a.done&&(o=i.return)&&o.call(i)}finally{if(n)throw n.error}}}}))},n.prototype.error=function(t){var e=this;S((function(){if(e._throwIfClosed(),!e.isStopped){e.hasError=e.isStopped=!0,e.thrownError=t;for(var n=e.observers;n.length;)n.shift().error(t)}}))},n.prototype.complete=function(){var t=this;S((function(){if(t._throwIfClosed(),!t.isStopped){t.isStopped=!0;for(var e=t.observers;e.length;)e.shift().complete()}}))},n.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(n.prototype,"observed",{get:function(){var t;return(null===(t=this.observers)||void 0===t?void 0:t.length)>0},enumerable:!1,configurable:!0}),n.prototype._trySubscribe=function(e){return this._throwIfClosed(),t.prototype._trySubscribe.call(this,e)},n.prototype._subscribe=function(t){return this._throwIfClosed(),this._checkFinalizedStatuses(t),this._innerSubscribe(t)},n.prototype._innerSubscribe=function(t){var e=this,n=this,r=n.hasError,o=n.isStopped,i=n.observers;return r||o?f:(this.currentObservers=null,i.push(t),new d((function(){e.currentObservers=null,l(i,t)})))},n.prototype._checkFinalizedStatuses=function(t){var e=this,n=e.hasError,r=e.thrownError,o=e.isStopped;n?t.error(r):o&&t.complete()},n.prototype.asObservable=function(){var t=new P;return t.source=this,t},n.create=function(t,e){return new Ot(t,e)},n}(P),Ot=function(t){function n(e,n){var r=t.call(this)||this;return r.destination=e,r.source=n,r}return e(n,t),n.prototype.next=function(t){var e,n;null===(n=null===(e=this.destination)||void 0===e?void 0:e.next)||void 0===n||n.call(e,t)},n.prototype.error=function(t){var e,n;null===(n=null===(e=this.destination)||void 0===e?void 0:e.error)||void 0===n||n.call(e,t)},n.prototype.complete=function(){var t,e;null===(e=null===(t=this.destination)||void 0===t?void 0:t.complete)||void 0===e||e.call(t)},n.prototype._subscribe=function(t){var e,n;return null!==(n=null===(e=this.source)||void 0===e?void 0:e.subscribe(t))&&void 0!==n?n:f},n}(It),kt=function(t){function n(e,n){return t.call(this)||this}return e(n,t),n.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},n}(d),At={setInterval:function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var a=At.delegate;return(null==a?void 0:a.setInterval)?a.setInterval.apply(a,i([t,e],o(n))):setInterval.apply(void 0,i([t,e],o(n)))},clearInterval:function(t){var e=At.delegate;return((null==e?void 0:e.clearInterval)||clearInterval)(t)},delegate:void 0},_t=function(t){function n(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r.pending=!1,r}return e(n,t),n.prototype.schedule=function(t,e){var n;if(void 0===e&&(e=0),this.closed)return this;this.state=t;var r=this.id,o=this.scheduler;return null!=r&&(this.id=this.recycleAsyncId(o,r,e)),this.pending=!0,this.delay=e,this.id=null!==(n=this.id)&&void 0!==n?n:this.requestAsyncId(o,this.id,e),this},n.prototype.requestAsyncId=function(t,e,n){return void 0===n&&(n=0),At.setInterval(t.flush.bind(t,this),n)},n.prototype.recycleAsyncId=function(t,e,n){if(void 0===n&&(n=0),null!=n&&this.delay===n&&!1===this.pending)return e;null!=e&&At.clearInterval(e)},n.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},n.prototype._execute=function(t,e){var n,r=!1;try{this.work(t)}catch(t){r=!0,n=t||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),n},n.prototype.unsubscribe=function(){if(!this.closed){var e=this.id,n=this.scheduler,r=n.actions;this.work=this.state=this.scheduler=null,this.pending=!1,l(r,this),null!=e&&(this.id=this.recycleAsyncId(n,e,null)),this.delay=null,t.prototype.unsubscribe.call(this)}},n}(kt),Pt={now:function(){return(Pt.delegate||Date).now()},delegate:void 0},Rt=function(){function t(e,n){void 0===n&&(n=t.now),this.schedulerActionCtor=e,this.now=n}return t.prototype.schedule=function(t,e,n){return void 0===e&&(e=0),new this.schedulerActionCtor(this,t).schedule(n,e)},t.now=Pt.now,t}(),Nt=new(function(t){function n(e,n){void 0===n&&(n=Rt.now);var r=t.call(this,e,n)||this;return r.actions=[],r._active=!1,r}return e(n,t),n.prototype.flush=function(t){var e=this.actions;if(this._active)e.push(t);else{var n;this._active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this._active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}},n}(Rt))(_t),Ut=Nt;function Ft(t,e){return void 0===t&&(t=0),void 0===e&&(e=Nt),t<0&&(t=0),function(t,e,n){void 0===t&&(t=0),void 0===n&&(n=Ut);var r=-1;return null!=e&&(Q(e)?n=e:r=e),new P((function(e){var o,i=(o=t)instanceof Date&&!isNaN(o)?+t-n.now():t;i<0&&(i=0);var a=0;return n.schedule((function(){e.closed||(e.next(a++),0<=r?this.schedule(void 0,r):e.complete())}),i)}))}(t,t,e)}function jt(t){return nt((function(e,n){K(t).subscribe(W(n,(function(){return n.complete()}),m)),!n.closed&&e.subscribe(n)}))}function Gt(t,e,n){return void 0===n&&(n=1/0),u(e)?Gt((function(n,r){return Lt((function(t,o){return e(n,t,r,o)}))(K(t(n,r)))}),n):("number"==typeof e&&(n=e),nt((function(e,r){return function(t,e,n,r,o,i,a,u){var c=[],s=0,l=0,d=!1,f=function(){!d||c.length||s||e.complete()},p=function(t){return s<r?h(t):c.push(t)},h=function(t){s++;var o=!1;K(n(t,l++)).subscribe(W(e,(function(t){e.next(t)}),(function(){o=!0}),void 0,(function(){if(o)try{s--;for(;c.length&&s<r;)t=void 0,t=c.shift(),h(t);f()}catch(t){e.error(t)}var t})))};return t.subscribe(W(e,p,(function(){d=!0,f()}))),function(){}}(e,r,t,n)})))}function Mt(){return void 0===(t=1)&&(t=1/0),Gt(_,t);var t}function zt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return Mt()(at(t,$(t)))}function Bt(t){return nt((function(e,n){var r=!1,o=W(n,(function(){null==o||o.unsubscribe(),r=!0}),m);K(t).subscribe(o),e.subscribe(W(n,(function(t){return r&&n.next(t)})))}))}function Vt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return at(t,$(t))}function Kt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return zt(e,Vt.apply(void 0,i([],o(t))))}}var Ht;!function(t){t[t.available=0]="available",t[t.onRoad=1]="onRoad",t[t.onBreak=2]="onBreak"}(Ht||(Ht={}));var Jt,Yt=function(){function t(t){this.id=t.id,this.FullName=t.FullName,this.PhoneNumber=t.PhoneNumber,this.Email=t.Email,this.DateOfBirth=t.DateOfBirth,this.Status=t.Status,this.AssignedVehicleID=t.AssignedVehicleID}return t.prototype.assignShipment=function(t){return e=this,n=void 0,o=function(){return function(t,e){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(u){return function(c){return function(u){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,u[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&u[0]?r.return:u[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,u[1])).done)return o;switch(r=0,o&&(u=[2&u[0],o.value]),u[0]){case 0:case 1:o=u;break;case 4:return a.label++,{value:u[1],done:!1};case 5:a.label++,r=u[1],u=[0];continue;case 7:u=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==u[0]&&2!==u[0])){a=0;continue}if(3===u[0]&&(!o||u[1]>o[0]&&u[1]<o[3])){a.label=u[1];break}if(6===u[0]&&a.label<o[1]){a.label=o[1],o=u;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(u);break}o[2]&&a.ops.pop(),a.trys.pop();continue}u=e.call(t,a)}catch(t){u=[6,t],r=0}finally{n=o=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,c])}}}(this,(function(e){switch(e.label){case 0:return[4,fetch(st+t)];case 1:return e.sent(),[4,fetch(ct)];case 2:return e.sent(),[2]}}))},new((r=void 0)||(r=Promise))((function(t,i){function a(t){try{c(o.next(t))}catch(t){i(t)}}function u(t){try{c(o.throw(t))}catch(t){i(t)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof r?n:new r((function(t){t(n)}))).then(a,u)}c((o=o.apply(e,n||[])).next())}));var e,n,r,o},t.prototype.destinationReachedUpdate=function(){this.Status=Ht.available,this.AssignedVehicleID=""},t.prototype.updateDriverData=function(t){t.hasOwnProperty("id")&&(this.id=t.id),t.hasOwnProperty("FullName")&&(this.FullName=t.FullName),t.hasOwnProperty("DateOfBirth")&&(this.DateOfBirth=t.DateOfBirth),t.hasOwnProperty("Email")&&(this.Email=t.Email),t.hasOwnProperty("PhoneNumber")&&(this.PhoneNumber=t.PhoneNumber),t.hasOwnProperty("Status")&&(this.Status=t.Status)},t}();!function(t){t.idle="idle",t.inTransit="inTransit"}(Jt||(Jt={}));var Wt=function(){function t(t){this.id=t.id,this.RegistrationExpiryDate=t.RegistrationExpiryDate,this.Model=t.Model,this.Capacity=t.Capacity,this.Load=t.Load,this.CurrentSpeed=t.CurrentSpeed,this.GasLevel=t.GasLevel,this.Status=t.Status,this.CurrentLocation=new google.maps.LatLng(t.CurrentLocation),this.FinalDestination=new google.maps.LatLng(t.FinalDestination)}return t.prototype.updateTruckData=function(t){t.hasOwnProperty("CurrentLocation")&&(this.CurrentLocation=t.CurrentLocation),t.hasOwnProperty("CurrentSpeed")&&(this.CurrentSpeed=t.CurrentSpeed),t.hasOwnProperty("GasLevel")&&(this.GasLevel=t.GasLevel),t.hasOwnProperty("Status")&&(this.Status=t.Status),t.hasOwnProperty("FinalDestination")&&(this.FinalDestination=t.FinalDestination)},t.prototype.trackTruckLocation=function(t,e){return n=this,r=void 0,i=function(){var t;return function(t,e){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(u){return function(c){return function(u){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,u[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&u[0]?r.return:u[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,u[1])).done)return o;switch(r=0,o&&(u=[2&u[0],o.value]),u[0]){case 0:case 1:o=u;break;case 4:return a.label++,{value:u[1],done:!1};case 5:a.label++,r=u[1],u=[0];continue;case 7:u=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==u[0]&&2!==u[0])){a=0;continue}if(3===u[0]&&(!o||u[1]>o[0]&&u[1]<o[3])){a.label=u[1];break}if(6===u[0]&&a.label<o[1]){a.label=o[1],o=u;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(u);break}o[2]&&a.ops.pop(),a.trys.pop();continue}u=e.call(t,a)}catch(t){u=[6,t],r=0}finally{n=o=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,c])}}}(this,(function(n){return t=new google.maps.Map(e,{center:this.CurrentLocation,zoom:4}),new google.maps.Marker({position:this.CurrentLocation,map:t}),[2]}))},new((o=void 0)||(o=Promise))((function(t,e){function a(t){try{c(i.next(t))}catch(t){e(t)}}function u(t){try{c(i.throw(t))}catch(t){e(t)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof o?n:new o((function(t){t(n)}))).then(a,u)}c((i=i.apply(n,r||[])).next())}));var n,r,o,i},t.prototype.destinationReachedUpdate=function(){this.Status="idle",this.Load=0,this.CurrentLocation=new google.maps.LatLng(lt),this.FinalDestination=new google.maps.LatLng(lt)},t}();function qt(t,e){if(t.AssignedTruckID&&t.AssignedDriverID){var n,r,a=ft(t.AssignedTruckID),u=(s=t.AssignedDriverID,at(fetch(ct+s).then((function(t){if(t.ok)return t.json();throw new Error("Driver not found.")})).catch((function(t){return console.error(t)}))));if(!a)throw new Error("Failed to load truck.");if(!u)throw new Error("Failed to load driver.");(function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n,r=Z(t),a=function(t){if(1===t.length){var e=t[0];if(gt(e))return{args:e,keys:null};if((r=e)&&"object"==typeof r&&Et(r)===St){var n=Ct(e);return{args:n.map((function(t){return e[t]})),keys:n}}}var r;return{args:t,keys:null}}(t),u=a.args,c=a.keys,s=new P((function(t){var e=u.length;if(e)for(var n=new Array(e),r=e,o=e,i=function(e){var i=!1;K(u[e]).subscribe(W(t,(function(t){i||(i=!0,o--),n[e]=t}),(function(){return r--}),void 0,(function(){r&&i||(o||t.next(c?function(t,e){return t.reduce((function(t,n,r){return t[n]=e[r],t}),{})}(c,n):n),t.complete())})))},a=0;a<e;a++)i(a);else t.complete()}));return r?s.pipe((n=r,Lt((function(t){return function(t,e){return xt(e)?t.apply(void 0,i([],o(e))):t(e)}(n,t)})))):s})([a,u]).pipe(Dt((function(t){var e=t[0],o=t[1];n=new Wt(e),r=new Yt(o)})),(c=function(){return at((i=n,new P,new P,new P,c=new It,a=Ft(2e3).pipe(jt(c),function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=$(t);return nt((function(e,r){(n?zt(t,e,n):zt(t,e)).subscribe(r)}))}(i.GasLevel),function(t,e){return nt(function(t,e,n,r,o){return function(r,o){var i=n,a=e,u=0;r.subscribe(W(o,(function(e){var n=u++;a=i?t(a,e,n):(i=!0,e),o.next(a)}),void 0))}}(t,e,arguments.length>=2))}((function(t){return t-1}),i.GasLevel),Dt((function(t){i.GasLevel=t}))),u=Ft(2e3).pipe(jt(c),Bt(a),Lt((function(t){return Math.floor(100*Math.random())})),Dt((function(t){i.CurrentSpeed=t})),Kt(0)),tt([u,a]).pipe(jt(c),(o=function(t){return t[0],t[1]>0},nt((function(t,e){var n=0;t.subscribe(W(e,(function(t){return o.call(undefined,t,n++)&&e.next(t)})))}))),Bt(a),Bt(u),Lt((function(t){var e=t[0],n=t[1],r=1e3*e/3600,o=r*n*2/(google.maps.geometry.spherical.computeDistanceBetween(i.CurrentLocation,i.FinalDestination)||1)*(i.FinalDestination.lat()-i.CurrentLocation.lat()),a=r*n*2/(google.maps.geometry.spherical.computeDistanceBetween(i.CurrentLocation,i.FinalDestination)||1)*(i.FinalDestination.lng()-i.CurrentLocation.lng()),u=i.CurrentLocation,s=new google.maps.LatLng(u.lat()+o,u.lng()+a);return u=s,Math.abs(u.lat()-i.FinalDestination.lat())<.01&&Math.abs(u.lng()-i.FinalDestination.lng())<.01&&(c.next(),console.log("final: "+u),console.log(i.id+" destination reached.")),u}))))).pipe(Lt((function(t){return{truck:n,driver:r,location:t}})),(e=function(){console.log("trackTruckLocation completed."),n.destinationReachedUpdate(),r.destinationReachedUpdate(),t.destinationReachedUpdate(),pt(n),vt(r),ht(t)},nt((function(t,n){try{t.subscribe(n)}finally{n.add(e)}}))));var e,o,i,a,u,c},nt((function(t,e){var n=null,r=!1,o=function(){return r&&!n&&e.complete()};t.subscribe(W(e,(function(t){null==n||n.unsubscribe();0;K(c()).subscribe(n=W(e,(function(t){return e.next(t)}),(function(){n=null,o()})))}),(function(){r=!0,o()})))})))).subscribe((function(t){var n=t.truck,r=(t.driver,t.location);n.CurrentLocation=r,console.log("TRUCK: ",n.id),console.log("Gas level: ",n.GasLevel),console.log("Speed: ",n.CurrentSpeed),console.log("Location: "+n.CurrentLocation),e.setPosition(r),e.setTitle("TRUCK "+n.id+"\nSpeed: "+n.CurrentSpeed.toString()+"\nGas level: "+n.GasLevel)}))}var c,s}function Qt(t,e){var n=this,r=document.createElement("div");r.classList.add("truck-div"),e.appendChild(r);var o=document.createElement("label");o.classList.add("label"),o.textContent=t.id,r.appendChild(o);var i=document.createElement("label");i.classList.add("label"),i.textContent=t.Model,r.appendChild(i);var a=document.createElement("label");a.classList.add("label"),a.textContent="CURRENT LOCATION: "+t.CurrentLocation.toString(),r.appendChild(a);var u=document.createElement("label");u.classList.add("label"),u.textContent="DESTINATION: "+t.FinalDestination.toString(),r.appendChild(u);var c=document.createElement("label");c.classList.add("label"),c.textContent="CURRENT SPEED: "+t.CurrentSpeed.toString()+"km/s",r.appendChild(c);var s=document.createElement("label");if(s.classList.add("label"),s.textContent="GAS LEVEL: "+t.GasLevel.toString()+"%",r.appendChild(s),"inTransit"==t.Status){var l=document.createElement("input");l.type="button",l.value="TRACK LOCATION",r.appendChild(l),l.addEventListener("click",(function(e){return r=n,o=void 0,a=function(){return function(t,e){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(u){return function(c){return function(u){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,u[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&u[0]?r.return:u[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,u[1])).done)return o;switch(r=0,o&&(u=[2&u[0],o.value]),u[0]){case 0:case 1:o=u;break;case 4:return a.label++,{value:u[1],done:!1};case 5:a.label++,r=u[1],u=[0];continue;case 7:u=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==u[0]&&2!==u[0])){a=0;continue}if(3===u[0]&&(!o||u[1]>o[0]&&u[1]<o[3])){a.label=u[1];break}if(6===u[0]&&a.label<o[1]){a.label=o[1],o=u;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(u);break}o[2]&&a.ops.pop(),a.trys.pop();continue}u=e.call(t,a)}catch(t){u=[6,t],r=0}finally{n=o=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,c])}}}(this,(function(e){return wt(new Wt(t)),[2]}))},new((i=void 0)||(i=Promise))((function(t,e){function n(t){try{c(a.next(t))}catch(t){e(t)}}function u(t){try{c(a.throw(t))}catch(t){e(t)}}function c(e){var r;e.done?t(e.value):(r=e.value,r instanceof i?r:new i((function(t){t(r)}))).then(n,u)}c((a=a.apply(r,o||[])).next())}));var r,o,i,a}))}console.log("div: ",r)}function Xt(t,e,n,r){var o=document.createElement("div");o.classList.add("order-div"),e.appendChild(o);var i=document.createElement("label");i.classList.add("label"),i.textContent="ORDER ID: "+t.id.toString(),o.appendChild(i);var a=document.createElement("label");a.classList.add("label"),a.textContent="STATUS: "+t.Status.toUpperCase(),o.appendChild(a);var u=document.createElement("label");u.classList.add("label"),u.textContent="TOTAL LOAD: "+t.TotalLoad.toString()+"t",o.appendChild(u);var c=document.createElement("label");if(c.classList.add("label"),c.textContent="DESTINATION: "+t.Destination.toString(),o.appendChild(c),"shipped"===t.Status){var s=document.createElement("input");s.type="button",s.value="TRACK ORDER",o.appendChild(s),s.addEventListener("click",(function(e){ft(t.AssignedTruckID).subscribe((function(t){wt(new Wt(t))}))}))}else if("pending"===t.Status){var l=document.createElement("input");l.type="button",l.value="SHIP ORDER",l.id="shipButtonID",o.appendChild(l),l.addEventListener("click",(function(e){!function(t,e,n){console.log("ORDER: ",t);var r=e.find((function(e){return"idle"===e.Status&&e.Capacity>=t.TotalLoad})),o=n.find((function(t){return t.Status===Ht.available}));r.Status="inTransit",r.Load=t.TotalLoad,r.FinalDestination=new google.maps.LatLng(t.Destination),o.Status=Ht.onRoad,o.AssignedVehicleID=r.id,t.Status="shipped",t.AssignedTruckID=r.id,t.AssignedDriverID=o.id,console.log("ORDER IS: ",t),console.log("TRUCK IS: ",r),console.log("DRIVER IS: ",o),pt(r),vt(o),ht(t)}(t,n,r)}))}}function Zt(t,e){var n=document.createElement("div");n.classList.add("driver-div"),e.appendChild(n);var r=document.createElement("label");r.classList.add("label"),r.textContent="DRIVER ID: "+t.id.toString(),n.appendChild(r);var o=document.createElement("label");o.classList.add("label"),o.textContent="FULL NAME: "+t.FullName,n.appendChild(o);var i=document.createElement("label");i.classList.add("label"),i.textContent="EMAIL: "+t.Email,n.appendChild(i);var a=document.createElement("label");if(a.classList.add("label"),a.textContent="PHONE NUMBER: "+t.PhoneNumber,n.appendChild(a),t.Status===Ht.onRoad){var u=document.createElement("label");u.classList.add("label"),u.textContent="ASSIGNED TRUCK: "+t.AssignedVehicleID,n.appendChild(u);var c=document.createElement("input");c.type="button",c.value="TRACK DRIVER",n.appendChild(c),c.addEventListener("click",(function(e){ft(t.AssignedVehicleID).subscribe((function(t){wt(new Wt(t))}))}))}}var $t,te=function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function a(t){try{c(r.next(t))}catch(t){i(t)}}function u(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,u)}c((r=r.apply(t,e||[])).next())}))},ee=function(t,e){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(u){return function(c){return function(u){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,u[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&u[0]?r.return:u[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,u[1])).done)return o;switch(r=0,o&&(u=[2&u[0],o.value]),u[0]){case 0:case 1:o=u;break;case 4:return a.label++,{value:u[1],done:!1};case 5:a.label++,r=u[1],u=[0];continue;case 7:u=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==u[0]&&2!==u[0])){a=0;continue}if(3===u[0]&&(!o||u[1]>o[0]&&u[1]<o[3])){a.label=u[1];break}if(6===u[0]&&a.label<o[1]){a.label=o[1],o=u;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(u);break}o[2]&&a.ops.pop(),a.trys.pop();continue}u=e.call(t,a)}catch(t){u=[6,t],r=0}finally{n=o=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,c])}}},ne=document.createElement("div"),re=document.createElement("div"),oe=document.createElement("div"),ie=document.createElement("div"),ae=document.createElement("div"),ue=document.createElement("div");ue.id="map",function(t,e,n,r,o,i){var a=document.createElement("div");a.classList.add("main-div"),a.id="main",document.body.appendChild(a),t.classList.add("menu-div"),a.appendChild(t);var u=document.createElement("h2");u.classList.add("menu-h"),u.textContent="MENU",u.style.marginBottom="40px",t.appendChild(u),e.classList.add("trucks-div"),e.textContent="TRUCKS",t.appendChild(e),n.classList.add("drivers-div"),n.textContent="DRIVERS",t.appendChild(n),r.classList.add("orders-div"),r.textContent="ORDERS",t.appendChild(r),o.classList.add("content-div"),a.appendChild(o);var c=document.createElement("h1");c.textContent="Welcome to order tracking. Please select entity.",o.appendChild(c),i.classList.add("map-div"),i.id="map",a.appendChild(i)}(ne,re,oe,ie,ae,ue),function(){te(this,void 0,void 0,(function(){return ee(this,(function(t){return $t=function(t){var e=new google.maps.Map(t,{center:lt,zoom:7});return yt=new google.maps.Marker({position:lt,map:e}),e}(ue),[2]}))}))}();var ce=[],se=[],le=[];tt([at(fetch(ut).then((function(t){if(t.ok)return t.json();throw new Error("Vehicles fetch failed.")})).catch((function(t){return console.log(t)}))),at(fetch(st).then((function(t){if(t.ok)return t.json();throw new Error("Orders fetch failed.")})).catch((function(t){return console.log(t)}))),at(fetch(ct).then((function(t){if(t.ok)return t.json();throw new Error("Drivers fetch failed.")})).catch((function(t){return console.log(t)})))]).subscribe((function(t){var e=t[0],n=t[1],r=t[2];ce=e,le=r,(se=n).forEach((function(t){var e=new mt(t);"shipped"===t.Status?qt(e,new google.maps.Marker({map:$t})):t.Status})),re.addEventListener("click",(function(t){return te(void 0,void 0,void 0,(function(){return ee(this,(function(e){return t.preventDefault(),bt(t,"trucks-div",ae),function(t,e){var n=document.createElement("div");n.classList.add("container-div"),e.appendChild(n);for(var r=0,o=t;r<o.length;r++){var i=o[r];Qt(new Wt(i),n)}}(ce,ae),[2]}))}))})),oe.addEventListener("click",(function(t){t.preventDefault(),bt(t,"drivers-div",ae),function(t,e){var n=document.createElement("div");n.classList.add("container-div"),e.appendChild(n);for(var r=0,o=t;r<o.length;r++){var i=o[r];Zt(new Yt(i),n)}}(le,ae)})),ie.addEventListener("click",(function(t){return te(void 0,void 0,void 0,(function(){return ee(this,(function(e){return t.preventDefault(),bt(t,"orders-div",ae),function(t,e,n,r){var o=document.createElement("div");o.classList.add("newOrder-div"),o.textContent="NEW ORDER",e.appendChild(o);var i=document.createElement("div");o.appendChild(i);var a=document.createElement("label");a.classList.add("label"),a.textContent="TOTAL LOAD:",i.appendChild(a);var u=document.createElement("input");u.type="number",u.classList.add("input"),i.appendChild(u);var c=document.createElement("div");c.classList.add("newOrderDestination-div"),o.appendChild(c);var s=document.createElement("label");s.classList.add("label"),s.textContent="ENTER DESTINATION LATITUDE AND LONGITUDE:",c.appendChild(s);var l=document.createElement("input");l.type="text",l.classList.add("input"),c.appendChild(l);var d=document.createElement("input");d.type="text",d.classList.add("input"),c.appendChild(d);var f=document.createElement("input");f.type="button",f.classList.add("newOrder-button"),f.value="PLACE NEW ORDER",o.appendChild(f);var p=document.createElement("div");p.classList.add("container-div"),e.appendChild(p);for(var h=0,v=t;h<v.length;h++){var b=v[h],y=new mt(b);"pending"===b.Status?Xt(y,p,n,r):Xt(y,p)}f.addEventListener("click",(function(e){var n=new mt(t.length,"pending",parseInt(u.value),new google.maps.LatLng(parseFloat(l.value),parseFloat(d.value)),"","");t.push(n),function(t){fetch(st,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}).then((function(t){return t.json()})).catch((function(t){return console.error(t)})).then((function(t){return console.log(t)}))}(n)}))}(se,ae,ce,le),[2]}))}))}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,