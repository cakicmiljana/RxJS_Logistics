(()=>{"use strict";var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};function e(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}function n(t,e){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(u){return function(c){return function(u){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,u[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&u[0]?r.return:u[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,u[1])).done)return o;switch(r=0,o&&(u=[2&u[0],o.value]),u[0]){case 0:case 1:o=u;break;case 4:return a.label++,{value:u[1],done:!1};case 5:a.label++,r=u[1],u=[0];continue;case 7:u=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==u[0]&&2!==u[0])){a=0;continue}if(3===u[0]&&(!o||u[1]>o[0]&&u[1]<o[3])){a.label=u[1];break}if(6===u[0]&&a.label<o[1]){a.label=o[1],o=u;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(u);break}o[2]&&a.ops.pop(),a.trys.pop();continue}u=e.call(t,a)}catch(t){u=[6,t],r=0}finally{n=o=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,c])}}}function r(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function o(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,i=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}function i(t,e,n){if(n||2===arguments.length)for(var r,o=0,i=e.length;o<i;o++)!r&&o in e||(r||(r=Array.prototype.slice.call(e,0,o)),r[o]=e[o]);return t.concat(r||Array.prototype.slice.call(e))}function a(t){return this instanceof a?(this.v=t,this):new a(t)}function u(t){return"function"==typeof t}function c(t){var e=t((function(t){Error.call(t),t.stack=(new Error).stack}));return e.prototype=Object.create(Error.prototype),e.prototype.constructor=e,e}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var s=c((function(t){return function(e){t(this),this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e}}));function l(t,e){if(t){var n=t.indexOf(e);0<=n&&t.splice(n,1)}}var d=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._finalizers=null}return t.prototype.unsubscribe=function(){var t,e,n,a,c;if(!this.closed){this.closed=!0;var l=this._parentage;if(l)if(this._parentage=null,Array.isArray(l))try{for(var d=r(l),f=d.next();!f.done;f=d.next())f.value.remove(this)}catch(e){t={error:e}}finally{try{f&&!f.done&&(e=d.return)&&e.call(d)}finally{if(t)throw t.error}}else l.remove(this);var p=this.initialTeardown;if(u(p))try{p()}catch(t){c=t instanceof s?t.errors:[t]}var v=this._finalizers;if(v){this._finalizers=null;try{for(var y=r(v),b=y.next();!b.done;b=y.next()){var m=b.value;try{h(m)}catch(t){c=null!=c?c:[],t instanceof s?c=i(i([],o(c)),o(t.errors)):c.push(t)}}}catch(t){n={error:t}}finally{try{b&&!b.done&&(a=y.return)&&a.call(y)}finally{if(n)throw n.error}}}if(c)throw new s(c)}},t.prototype.add=function(e){var n;if(e&&e!==this)if(this.closed)h(e);else{if(e instanceof t){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(e)}},t.prototype._hasParent=function(t){var e=this._parentage;return e===t||Array.isArray(e)&&e.includes(t)},t.prototype._addParent=function(t){var e=this._parentage;this._parentage=Array.isArray(e)?(e.push(t),e):e?[e,t]:t},t.prototype._removeParent=function(t){var e=this._parentage;e===t?this._parentage=null:Array.isArray(e)&&l(e,t)},t.prototype.remove=function(e){var n=this._finalizers;n&&l(n,e),e instanceof t&&e._removeParent(this)},t.EMPTY=((e=new t).closed=!0,e),t;var e}(),f=d.EMPTY;function p(t){return t instanceof d||t&&"closed"in t&&u(t.remove)&&u(t.add)&&u(t.unsubscribe)}function h(t){u(t)?t():t.unsubscribe()}var v={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},y={setTimeout:function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var a=y.delegate;return(null==a?void 0:a.setTimeout)?a.setTimeout.apply(a,i([t,e],o(n))):setTimeout.apply(void 0,i([t,e],o(n)))},clearTimeout:function(t){var e=y.delegate;return((null==e?void 0:e.clearTimeout)||clearTimeout)(t)},delegate:void 0};function b(t){y.setTimeout((function(){var e=v.onUnhandledError;if(!e)throw t;e(t)}))}function m(){}var w=g("C",void 0,void 0);function g(t,e,n){return{kind:t,value:e,error:n}}var E=null;function S(t){if(v.useDeprecatedSynchronousErrorHandling){var e=!E;if(e&&(E={errorThrown:!1,error:null}),t(),e){var n=E,r=n.errorThrown,o=n.error;if(E=null,r)throw o}}else t()}var C=function(t){function n(e){var n=t.call(this)||this;return n.isStopped=!1,e?(n.destination=e,p(e)&&e.add(n)):n.destination=I,n}return e(n,t),n.create=function(t,e,n){return new T(t,e,n)},n.prototype.next=function(t){this.isStopped?_(function(t){return g("N",t,void 0)}(t),this):this._next(t)},n.prototype.error=function(t){this.isStopped?_(g("E",void 0,t),this):(this.isStopped=!0,this._error(t))},n.prototype.complete=function(){this.isStopped?_(w,this):(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},n.prototype._next=function(t){this.destination.next(t)},n.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},n.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},n}(d),x=Function.prototype.bind;function L(t,e){return x.call(t,e)}var D=function(){function t(t){this.partialObserver=t}return t.prototype.next=function(t){var e=this.partialObserver;if(e.next)try{e.next(t)}catch(t){O(t)}},t.prototype.error=function(t){var e=this.partialObserver;if(e.error)try{e.error(t)}catch(t){O(t)}else O(t)},t.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(t){O(t)}},t}(),T=function(t){function n(e,n,r){var o,i,a=t.call(this)||this;return u(e)||!e?o={next:null!=e?e:void 0,error:null!=n?n:void 0,complete:null!=r?r:void 0}:a&&v.useDeprecatedNextContext?((i=Object.create(e)).unsubscribe=function(){return a.unsubscribe()},o={next:e.next&&L(e.next,i),error:e.error&&L(e.error,i),complete:e.complete&&L(e.complete,i)}):o=e,a.destination=new D(o),a}return e(n,t),n}(C);function O(t){var e;v.useDeprecatedSynchronousErrorHandling?(e=t,v.useDeprecatedSynchronousErrorHandling&&E&&(E.errorThrown=!0,E.error=e)):b(t)}function _(t,e){var n=v.onStoppedNotification;n&&y.setTimeout((function(){return n(t,e)}))}var I={closed:!0,next:m,error:function(t){throw t},complete:m},k="function"==typeof Symbol&&Symbol.observable||"@@observable";function P(t){return t}var A=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r,o=this,i=(r=t)&&r instanceof C||function(t){return t&&u(t.next)&&u(t.error)&&u(t.complete)}(r)&&p(r)?t:new T(t,e,n);return S((function(){var t=o,e=t.operator,n=t.source;i.add(e?e.call(i,n):n?o._subscribe(i):o._trySubscribe(i))})),i},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){t.error(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=N(e))((function(e,r){var o=new T({next:function(e){try{t(e)}catch(t){r(t),o.unsubscribe()}},error:r,complete:e});n.subscribe(o)}))},t.prototype._subscribe=function(t){var e;return null===(e=this.source)||void 0===e?void 0:e.subscribe(t)},t.prototype[k]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return(0===(n=t).length?P:1===n.length?n[0]:function(t){return n.reduce((function(t,e){return e(t)}),t)})(this);var n},t.prototype.toPromise=function(t){var e=this;return new(t=N(t))((function(t,n){var r;e.subscribe((function(t){return r=t}),(function(t){return n(t)}),(function(){return t(r)}))}))},t.create=function(e){return new t(e)},t}();function N(t){var e;return null!==(e=null!=t?t:v.Promise)&&void 0!==e?e:Promise}var R=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function j(t){return u(null==t?void 0:t.then)}function U(t){return u(t[k])}function F(t){return Symbol.asyncIterator&&u(null==t?void 0:t[Symbol.asyncIterator])}function G(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var M="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function z(t){return u(null==t?void 0:t[M])}function B(t){return function(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(t,e||[]),i=[];return r={},u("next"),u("throw"),u("return"),r[Symbol.asyncIterator]=function(){return this},r;function u(t){o[t]&&(r[t]=function(e){return new Promise((function(n,r){i.push([t,e,n,r])>1||c(t,e)}))})}function c(t,e){try{(n=o[t](e)).value instanceof a?Promise.resolve(n.value.v).then(s,l):d(i[0][2],n)}catch(t){d(i[0][3],t)}var n}function s(t){c("next",t)}function l(t){c("throw",t)}function d(t,e){t(e),i.shift(),i.length&&c(i[0][0],i[0][1])}}(this,arguments,(function(){var e,r,o;return n(this,(function(n){switch(n.label){case 0:e=t.getReader(),n.label=1;case 1:n.trys.push([1,,9,10]),n.label=2;case 2:return[4,a(e.read())];case 3:return r=n.sent(),o=r.value,r.done?[4,a(void 0)]:[3,5];case 4:return[2,n.sent()];case 5:return[4,a(o)];case 6:return[4,n.sent()];case 7:return n.sent(),[3,2];case 8:return[3,10];case 9:return e.releaseLock(),[7];case 10:return[2]}}))}))}function V(t){return u(null==t?void 0:t.getReader)}function H(t){if(t instanceof A)return t;if(null!=t){if(U(t))return i=t,new A((function(t){var e=i[k]();if(u(e.subscribe))return e.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(R(t))return o=t,new A((function(t){for(var e=0;e<o.length&&!t.closed;e++)t.next(o[e]);t.complete()}));if(j(t))return n=t,new A((function(t){n.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,b)}));if(F(t))return K(t);if(z(t))return e=t,new A((function(t){var n,o;try{for(var i=r(e),a=i.next();!a.done;a=i.next()){var u=a.value;if(t.next(u),t.closed)return}}catch(t){n={error:t}}finally{try{a&&!a.done&&(o=i.return)&&o.call(i)}finally{if(n)throw n.error}}t.complete()}));if(V(t))return K(B(t))}var e,n,o,i;throw G(t)}function K(t){return new A((function(e){(function(t,e){var o,i,a,u,c,s,l,d;return c=this,s=void 0,d=function(){var c,s;return n(this,(function(n){switch(n.label){case 0:n.trys.push([0,5,6,11]),o=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=r(t),e={},o("next"),o("throw"),o("return"),e[Symbol.asyncIterator]=function(){return this},e);function o(n){e[n]=t[n]&&function(e){return new Promise((function(r,o){!function(t,e,n,r){Promise.resolve(r).then((function(e){t({value:e,done:n})}),e)}(r,o,(e=t[n](e)).done,e.value)}))}}}(t),n.label=1;case 1:return[4,o.next()];case 2:if((i=n.sent()).done)return[3,4];if(c=i.value,e.next(c),e.closed)return[2];n.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return s=n.sent(),a={error:s},[3,11];case 6:return n.trys.push([6,,9,10]),i&&!i.done&&(u=o.return)?[4,u.call(o)]:[3,8];case 7:n.sent(),n.label=8;case 8:return[3,10];case 9:if(a)throw a.error;return[7];case 10:return[7];case 11:return e.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(t,e){function n(t){try{o(d.next(t))}catch(t){e(t)}}function r(t){try{o(d.throw(t))}catch(t){e(t)}}function o(e){var o;e.done?t(e.value):(o=e.value,o instanceof l?o:new l((function(t){t(o)}))).then(n,r)}o((d=d.apply(c,s||[])).next())}))})(t,e).catch((function(t){return e.error(t)}))}))}var J=Array.isArray,Y=new A((function(t){return t.complete()}));function W(t,e,n,r,o){return new q(t,e,n,r,o)}var q=function(t){function n(e,n,r,o,i,a){var u=t.call(this,e)||this;return u.onFinalize=i,u.shouldUnsubscribe=a,u._next=n?function(t){try{n(t)}catch(t){e.error(t)}}:t.prototype._next,u._error=o?function(t){try{o(t)}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._error,u._complete=r?function(){try{r()}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,u}return e(n,t),n.prototype.unsubscribe=function(){var e;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;t.prototype.unsubscribe.call(this),!n&&(null===(e=this.onFinalize)||void 0===e||e.call(this))}},n}(C);var Q=c((function(t){return function(){t(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),X=function(t){function n(){var e=t.call(this)||this;return e.closed=!1,e.currentObservers=null,e.observers=[],e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return e(n,t),n.prototype.lift=function(t){var e=new Z(this,this);return e.operator=t,e},n.prototype._throwIfClosed=function(){if(this.closed)throw new Q},n.prototype.next=function(t){var e=this;S((function(){var n,o;if(e._throwIfClosed(),!e.isStopped){e.currentObservers||(e.currentObservers=Array.from(e.observers));try{for(var i=r(e.currentObservers),a=i.next();!a.done;a=i.next())a.value.next(t)}catch(t){n={error:t}}finally{try{a&&!a.done&&(o=i.return)&&o.call(i)}finally{if(n)throw n.error}}}}))},n.prototype.error=function(t){var e=this;S((function(){if(e._throwIfClosed(),!e.isStopped){e.hasError=e.isStopped=!0,e.thrownError=t;for(var n=e.observers;n.length;)n.shift().error(t)}}))},n.prototype.complete=function(){var t=this;S((function(){if(t._throwIfClosed(),!t.isStopped){t.isStopped=!0;for(var e=t.observers;e.length;)e.shift().complete()}}))},n.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(n.prototype,"observed",{get:function(){var t;return(null===(t=this.observers)||void 0===t?void 0:t.length)>0},enumerable:!1,configurable:!0}),n.prototype._trySubscribe=function(e){return this._throwIfClosed(),t.prototype._trySubscribe.call(this,e)},n.prototype._subscribe=function(t){return this._throwIfClosed(),this._checkFinalizedStatuses(t),this._innerSubscribe(t)},n.prototype._innerSubscribe=function(t){var e=this,n=this,r=n.hasError,o=n.isStopped,i=n.observers;return r||o?f:(this.currentObservers=null,i.push(t),new d((function(){e.currentObservers=null,l(i,t)})))},n.prototype._checkFinalizedStatuses=function(t){var e=this,n=e.hasError,r=e.thrownError,o=e.isStopped;n?t.error(r):o&&t.complete()},n.prototype.asObservable=function(){var t=new A;return t.source=this,t},n.create=function(t,e){return new Z(t,e)},n}(A),Z=function(t){function n(e,n){var r=t.call(this)||this;return r.destination=e,r.source=n,r}return e(n,t),n.prototype.next=function(t){var e,n;null===(n=null===(e=this.destination)||void 0===e?void 0:e.next)||void 0===n||n.call(e,t)},n.prototype.error=function(t){var e,n;null===(n=null===(e=this.destination)||void 0===e?void 0:e.error)||void 0===n||n.call(e,t)},n.prototype.complete=function(){var t,e;null===(e=null===(t=this.destination)||void 0===t?void 0:t.complete)||void 0===e||e.call(t)},n.prototype._subscribe=function(t){var e,n;return null!==(n=null===(e=this.source)||void 0===e?void 0:e.subscribe(t))&&void 0!==n?n:f},n}(X);const $="http://localhost:3000/vehicles/",tt="http://localhost:3000/drivers/",et="http://localhost:3000/orders/",nt={lat:42.9977,lng:21.9654};function rt(t,e,n,r,o){void 0===r&&(r=0),void 0===o&&(o=!1);var i=e.schedule((function(){n(),o?t.add(this.schedule(null,r)):this.unsubscribe()}),r);if(t.add(i),!o)return i}function ot(t){return function(e){if(function(t){return u(null==t?void 0:t.lift)}(e))return e.lift((function(e){try{return t(e,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}function it(t,e){return void 0===e&&(e=0),ot((function(n,r){n.subscribe(W(r,(function(n){return rt(r,t,(function(){return r.next(n)}),e)}),(function(){return rt(r,t,(function(){return r.complete()}),e)}),(function(n){return rt(r,t,(function(){return r.error(n)}),e)})))}))}function at(t,e){return void 0===e&&(e=0),ot((function(n,r){r.add(t.schedule((function(){return n.subscribe(r)}),e))}))}function ut(t,e){if(!t)throw new Error("Iterable cannot be null");return new A((function(n){rt(n,e,(function(){var r=t[Symbol.asyncIterator]();rt(n,e,(function(){r.next().then((function(t){t.done?n.complete():n.next(t.value)}))}),0,!0)}))}))}function ct(t,e){return e?function(t,e){if(null!=t){if(U(t))return function(t,e){return H(t).pipe(at(e),it(e))}(t,e);if(R(t))return function(t,e){return new A((function(n){var r=0;return e.schedule((function(){r===t.length?n.complete():(n.next(t[r++]),n.closed||this.schedule())}))}))}(t,e);if(j(t))return function(t,e){return H(t).pipe(at(e),it(e))}(t,e);if(F(t))return ut(t,e);if(z(t))return function(t,e){return new A((function(n){var r;return rt(n,e,(function(){r=t[M](),rt(n,e,(function(){var t,e,o;try{e=(t=r.next()).value,o=t.done}catch(t){return void n.error(t)}o?n.complete():n.next(e)}),0,!0)})),function(){return u(null==r?void 0:r.return)&&r.return()}}))}(t,e);if(V(t))return function(t,e){return ut(B(t),e)}(t,e)}throw G(t)}(t,e):H(t)}var st;function lt(t){fetch("".concat(et,"/").concat(t.id),{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}).then((function(e){t.updateOrderData(t)}))}function dt(t,e,n){for(t.target;n.firstChild;)n.classList.contains(e)||(console.log("item",n.lastChild,"deleted"),n.removeChild(n.lastChild))}!function(t){t.pending="pending",t.shipped="shipped",t.delivered="delivered"}(st||(st={}));var ft,pt=function(){function t(t,e,n,r,o,i){"number"==typeof t?(this.id=t,this.Status=e,this.TotalLoad=n,this.Destination=r,this.AssignedDriverID=o,this.AssignedTruckID=i):(this.id=t.id,this.Status=t.Status,this.TotalLoad=t.TotalLoad,this.Destination=new google.maps.LatLng(t.Destination),this.AssignedDriverID=t.AssignedDriverID,this.AssignedTruckID=t.AssignedTruckID)}return t.prototype.placeNewOrder=function(e,n,r,o,i,a){new t(e,n,r,o,i,a),lt(this)},t.prototype.updateOrderData=function(t){t.hasOwnProperty("Status")&&(this.Status=t.Status),t.hasOwnProperty("TotalLoad")&&(this.TotalLoad=t.TotalLoad),t.hasOwnProperty("Destination")&&(this.Destination=t.Destination),t.hasOwnProperty("AssignedDriverID")&&(this.AssignedDriverID=t.AssignedDriverID),t.hasOwnProperty("AssignedTruckID")&&(this.AssignedTruckID=t.AssignedTruckID)},t.prototype.shipOrder=function(t,e){var n,r;t.Status="inTransit",t.Load=this.TotalLoad,t.FinalDestination=new google.maps.LatLng(this.Destination),e.Status="onRoad",e.AssignedVehicleID=t.id,this.Status="shipped",this.AssignedTruckID=t.id,this.AssignedDriverID=e.id,n=t,fetch("".concat($,"/").concat(n.id),{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(n)}).then((function(t){n.updateTruckData(n)})),r=e,fetch("".concat(tt,"/").concat(r.id),{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(r)}).then((function(t){r.updateDriverData(r)})),lt(this)},t}();!function(t){t[t.available=0]="available",t[t.onRoad=1]="onRoad",t[t.onBreak=2]="onBreak"}(ft||(ft={}));var ht,vt=function(){function t(t){this.id=t.id,this.FullName=t.FullName,this.PhoneNumber=t.PhoneNumber,this.Email=t.Email,this.DateOfBirth=t.DateOfBirth,this.Status=t.Status,this.AssignedVehicleID=t.AssignedVehicleID}return t.prototype.assignShipment=function(t){return e=this,n=void 0,o=function(){return function(t,e){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(u){return function(c){return function(u){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,u[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&u[0]?r.return:u[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,u[1])).done)return o;switch(r=0,o&&(u=[2&u[0],o.value]),u[0]){case 0:case 1:o=u;break;case 4:return a.label++,{value:u[1],done:!1};case 5:a.label++,r=u[1],u=[0];continue;case 7:u=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==u[0]&&2!==u[0])){a=0;continue}if(3===u[0]&&(!o||u[1]>o[0]&&u[1]<o[3])){a.label=u[1];break}if(6===u[0]&&a.label<o[1]){a.label=o[1],o=u;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(u);break}o[2]&&a.ops.pop(),a.trys.pop();continue}u=e.call(t,a)}catch(t){u=[6,t],r=0}finally{n=o=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,c])}}}(this,(function(e){switch(e.label){case 0:return[4,fetch(et+t)];case 1:return e.sent(),[4,fetch(tt)];case 2:return e.sent(),[2]}}))},new((r=void 0)||(r=Promise))((function(t,i){function a(t){try{c(o.next(t))}catch(t){i(t)}}function u(t){try{c(o.throw(t))}catch(t){i(t)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof r?n:new r((function(t){t(n)}))).then(a,u)}c((o=o.apply(e,n||[])).next())}));var e,n,r,o},t.prototype.updateDriverData=function(t){t.hasOwnProperty("id")&&(this.id=t.id),t.hasOwnProperty("FullName")&&(this.FullName=t.FullName),t.hasOwnProperty("DateOfBirth")&&(this.DateOfBirth=t.DateOfBirth),t.hasOwnProperty("Email")&&(this.Email=t.Email),t.hasOwnProperty("PhoneNumber")&&(this.PhoneNumber=t.PhoneNumber),t.hasOwnProperty("Status")&&(this.Status=t.Status)},t}();!function(t){t.idle="idle",t.inTransit="inTransit"}(ht||(ht={}));var yt=function(){function t(t){this.id=t.id,this.RegistrationExpiryDate=t.RegistrationExpiryDate,this.Model=t.Model,this.Capacity=t.Capacity,this.Load=t.Load,this.CurrentSpeed=t.CurrentSpeed,this.GasLevel=t.GasLevel,this.Status=t.Status,this.CurrentLocation=new google.maps.LatLng(t.CurrentLocation),this.FinalDestination=new google.maps.LatLng(t.FinalDestination)}return t.prototype.updateTruckData=function(t){t.hasOwnProperty("CurrentLocation")&&(this.CurrentLocation=t.CurrentLocation),t.hasOwnProperty("CurrentSpeed")&&(this.CurrentSpeed=t.CurrentSpeed),t.hasOwnProperty("GasLevel")&&(this.GasLevel=t.GasLevel),t.hasOwnProperty("Status")&&(this.Status=t.Status),t.hasOwnProperty("FinalDestination")&&(this.FinalDestination=t.FinalDestination)},t.prototype.trackTruckLocation=function(t,e){return n=this,r=void 0,i=function(){var t;return function(t,e){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(u){return function(c){return function(u){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,u[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&u[0]?r.return:u[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,u[1])).done)return o;switch(r=0,o&&(u=[2&u[0],o.value]),u[0]){case 0:case 1:o=u;break;case 4:return a.label++,{value:u[1],done:!1};case 5:a.label++,r=u[1],u=[0];continue;case 7:u=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==u[0]&&2!==u[0])){a=0;continue}if(3===u[0]&&(!o||u[1]>o[0]&&u[1]<o[3])){a.label=u[1];break}if(6===u[0]&&a.label<o[1]){a.label=o[1],o=u;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(u);break}o[2]&&a.ops.pop(),a.trys.pop();continue}u=e.call(t,a)}catch(t){u=[6,t],r=0}finally{n=o=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,c])}}}(this,(function(n){return t=new google.maps.Map(e,{center:this.CurrentLocation,zoom:4}),new google.maps.Marker({position:this.CurrentLocation,map:t}),[2]}))},new((o=void 0)||(o=Promise))((function(t,e){function a(t){try{c(i.next(t))}catch(t){e(t)}}function u(t){try{c(i.throw(t))}catch(t){e(t)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof o?n:new o((function(t){t(n)}))).then(a,u)}c((i=i.apply(n,r||[])).next())}));var n,r,o,i},t}();function bt(t,e){var n=this,r=document.createElement("div");r.classList.add("truck-div"),e.appendChild(r);var o=document.createElement("label");o.classList.add("label"),o.textContent=t.id,r.appendChild(o);var i=document.createElement("label");i.classList.add("label"),i.textContent=t.Model,r.appendChild(i);var a=document.createElement("label");a.classList.add("label"),a.textContent="CURRENT LOCATION: "+t.CurrentLocation.toString(),r.appendChild(a);var u=document.createElement("label");u.classList.add("label"),u.textContent="DESTINATION: "+t.FinalDestination.toString(),r.appendChild(u);var c=document.createElement("label");c.classList.add("label"),c.textContent="CURRENT SPEED: "+t.CurrentSpeed.toString()+"km/s",r.appendChild(c);var s=document.createElement("label");if(s.classList.add("label"),s.textContent="GAS LEVEL: "+t.GasLevel.toString()+"%",r.appendChild(s),"inTransit"==t.Status){var l=document.createElement("input");l.type="button",l.value="TRACK LOCATION",r.appendChild(l),l.addEventListener("click",(function(r){for(console.log("target ",r.target);e.childNodes.length>1;)e.firstChild!=r.target?e.removeChild(e.firstChild):e.removeChild(e.lastChild);n.trackTruckLocation(t.id,e)}))}console.log("div: ",r)}function mt(t,e){var n=document.createElement("div");n.classList.add("order-div"),e.appendChild(n);var r=document.createElement("label");r.classList.add("label"),r.textContent="ORDER ID: "+t.id.toString(),n.appendChild(r);var o=document.createElement("label");o.classList.add("label"),o.textContent="STATUS: "+t.Status.toUpperCase(),n.appendChild(o);var i=document.createElement("label");i.classList.add("label"),i.textContent="TOTAL LOAD: "+t.TotalLoad.toString()+"t",n.appendChild(i);var a=document.createElement("label");if(a.classList.add("label"),a.textContent="DESTINATION: "+t.Destination.toString(),n.appendChild(a),"shipped"==t.Status){var u=document.createElement("input");u.type="button",u.value="TRACK ORDER",n.appendChild(u),u.addEventListener("click",(function(t){}))}else if("pending"==t.Status){var c=document.createElement("input");c.type="button",c.value="SHIP ORDER",n.appendChild(c),c.addEventListener("click",(function(e){t.Status}))}}function wt(t,e){var n=document.createElement("div");n.classList.add("driver-div"),e.appendChild(n);var r=document.createElement("label");r.classList.add("label"),r.textContent="DRIVER ID: "+t.id.toString(),n.appendChild(r);var o=document.createElement("label");o.classList.add("label"),o.textContent="FULL NAME: "+t.FullName,n.appendChild(o);var i=document.createElement("label");i.classList.add("label"),i.textContent="EMAIL: "+t.Email,n.appendChild(i);var a=document.createElement("label");if(a.classList.add("label"),a.textContent="PHONE NUMBER: "+t.PhoneNumber,n.appendChild(a),"onRoad"==t.Status){var u=document.createElement("label");u.classList.add("label"),u.textContent="ASSIGNED TRUCK: "+t.AssignedVehicleID,n.appendChild(u);var c=document.createElement("input");c.type="button",c.value="TRACK DRIVER",n.appendChild(c),c.addEventListener("click",(function(t){for(console.log("target ",t.target);e.childNodes.length>1;)e.firstChild!=t.target?e.removeChild(e.firstChild):e.removeChild(e.lastChild)}))}}var gt=function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function a(t){try{c(r.next(t))}catch(t){i(t)}}function u(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,u)}c((r=r.apply(t,e||[])).next())}))},Et=function(t,e){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(u){return function(c){return function(u){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,u[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&u[0]?r.return:u[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,u[1])).done)return o;switch(r=0,o&&(u=[2&u[0],o.value]),u[0]){case 0:case 1:o=u;break;case 4:return a.label++,{value:u[1],done:!1};case 5:a.label++,r=u[1],u=[0];continue;case 7:u=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==u[0]&&2!==u[0])){a=0;continue}if(3===u[0]&&(!o||u[1]>o[0]&&u[1]<o[3])){a.label=u[1];break}if(6===u[0]&&a.label<o[1]){a.label=o[1],o=u;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(u);break}o[2]&&a.ops.pop(),a.trys.pop();continue}u=e.call(t,a)}catch(t){u=[6,t],r=0}finally{n=o=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,c])}}},St=document.createElement("div"),Ct=document.createElement("div"),xt=document.createElement("div"),Lt=document.createElement("div"),Dt=document.createElement("div"),Tt=document.createElement("div");!function(t,e,n,r,o,i){var a=document.createElement("div");a.classList.add("main-div"),a.id="main",document.body.appendChild(a),t.classList.add("menu-div"),a.appendChild(t);var u=document.createElement("h2");u.classList.add("menu-h"),u.textContent="MENU",u.style.marginBottom="40px",t.appendChild(u),e.classList.add("trucks-div"),e.textContent="TRUCKS",t.appendChild(e),n.classList.add("drivers-div"),n.textContent="DRIVERS",t.appendChild(n),r.classList.add("orders-div"),r.textContent="ORDERS",t.appendChild(r),o.classList.add("content-div"),a.appendChild(o),i.classList.add("map-div"),i.id="map",o.appendChild(i)}(St,Ct,xt,Lt,Dt,Tt),function(){gt(this,void 0,void 0,(function(){var t;return Et(this,(function(e){return t=new google.maps.Map(Tt,{center:nt,zoom:7}),new google.maps.Marker({position:nt,map:t}),[2]}))}))}();var Ot=[],_t=[],It=[];(function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=function(t){return u((e=t)[e.length-1])?t.pop():void 0;var e}(t),r=function(t){return 1===t.length&&J(t[0])?t[0]:t}(t);return r.length?new A((function(t){var e=r.map((function(){return[]})),a=r.map((function(){return!1}));t.add((function(){e=a=null}));for(var u=function(u){H(r[u]).subscribe(W(t,(function(r){if(e[u].push(r),e.every((function(t){return t.length}))){var c=e.map((function(t){return t.shift()}));t.next(n?n.apply(void 0,i([],o(c))):c),e.some((function(t,e){return!t.length&&a[e]}))&&t.complete()}}),(function(){a[u]=!0,!e[u].length&&t.complete()})))},c=0;!t.closed&&c<r.length;c++)u(c);return function(){e=a=null}})):Y})([ct(fetch($).then((function(t){if(t.ok)return t.json();throw new Error("Vehicles fetch failed.")})).catch((function(t){return console.log(t)}))),ct(fetch(et).then((function(t){if(t.ok)return t.json();throw new Error("Orders fetch failed.")})).catch((function(t){return console.log(t)}))),ct(fetch(tt).then((function(t){if(t.ok)return t.json();throw new Error("Drivers fetch failed.")})).catch((function(t){return console.log(t)})))]).subscribe((function(t){var e=t[0],n=t[1],r=t[2];Ot=e,It=r,(_t=n).forEach((function(t){t.Status}))})),new A,new A,new A,new X,Ct.addEventListener("click",(function(t){t.preventDefault(),dt(t,"trucks-div",Dt),function(t,e){var n=document.createElement("div");n.classList.add("container-div"),e.appendChild(n);for(var r=0,o=t;r<o.length;r++){var i=o[r];bt(new yt(i),n)}}(Ot,Dt)})),xt.addEventListener("click",(function(t){t.preventDefault(),dt(t,"drivers-div",Dt),function(t,e){var n=document.createElement("div");n.classList.add("container-div"),e.appendChild(n);for(var r=0,o=t;r<o.length;r++){var i=o[r];wt(new vt(i),n)}}(It,Dt)})),Lt.addEventListener("click",(function(t){return gt(void 0,void 0,void 0,(function(){return Et(this,(function(e){return t.preventDefault(),dt(t,"orders-div",Dt),function(t,e){var n=document.createElement("div");n.classList.add("newOrder-div"),n.textContent="NEW ORDER",e.appendChild(n);var r=document.createElement("div");n.appendChild(r);var o=document.createElement("label");o.classList.add("label"),o.textContent="TOTAL LOAD:",r.appendChild(o);var i=document.createElement("input");i.type="number",i.classList.add("input"),r.appendChild(i);var a=document.createElement("div");a.classList.add("newOrderDestination-div"),n.appendChild(a);var u=document.createElement("label");u.classList.add("label"),u.textContent="ENTER DESTINATION LATITUDE AND LONGITUDE:",a.appendChild(u);var c=document.createElement("input");c.type="text",c.classList.add("input"),a.appendChild(c);var s=document.createElement("input");s.type="text",s.classList.add("input"),a.appendChild(s);var l=document.createElement("input");l.type="button",l.classList.add("newOrder-button"),l.value="PLACE NEW ORDER",n.appendChild(l);var d=document.createElement("div");d.classList.add("container-div"),e.appendChild(d);for(var f=0,p=t;f<p.length;f++){var h=p[f];mt(new pt(h),d)}l.addEventListener("click",(function(e){var n,r=new pt(t.length,"pending",parseInt(i.value),new google.maps.LatLng(parseFloat(c.value),parseFloat(s.value)),"","");t.push(r),n=r,fetch(et,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(n)}).then((function(t){return t.json()})).catch((function(t){return console.error(t)})).then((function(t){return console.log(t)}))}))}(_t,Dt),[2]}))}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,